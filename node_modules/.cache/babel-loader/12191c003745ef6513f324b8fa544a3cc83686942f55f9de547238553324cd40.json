{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\37063\\\\OneDrive\\\\Desktop\\\\projects\\\\quote-generator\\\\src\\\\components\\\\Main.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport '../styles/main.css';\nimport Quote from './Quote';\nimport Author from './Author';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [data, setData] = useState(null);\n  const [quote, setQuote] = useState('');\n  const [author, setAuthor] = useState('');\n  const [genre, setGenre] = useState('');\n  const getRandomQuote = data => {\n    let randomNumber = Math.floor(Math.random() * data.length);\n    for (let i = 0; i < data.length; i++) {\n      if (data.key === randomNumber) {\n        setAuthor(data.key.quoteAuthor);\n        setQuote(data.key.quoteText);\n        setGenre(data.key.quoteGenre);\n      }\n    }\n  };\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch('https://quote-garden.onrender.com/api/v3/quotes');\n        const data = await response.json();\n        console.log(data);\n        setData(data);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    fetchData();\n    getRandomQuote(data);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"random\",\n      onClick: getRandomQuote,\n      children: \"random\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Quote, {\n      quote: quote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Author, {\n      author: author,\n      genre: genre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(Main, \"G6R7yXo+xbRRty1dZrKF8AKDjho=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["useState","useEffect","Quote","Author","jsxDEV","_jsxDEV","Main","_s","data","setData","quote","setQuote","author","setAuthor","genre","setGenre","getRandomQuote","randomNumber","Math","floor","random","length","i","key","quoteAuthor","quoteText","quoteGenre","fetchData","response","fetch","json","console","log","err","children","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/37063/OneDrive/Desktop/projects/quote-generator/src/components/Main.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nimport '../styles/main.css';\r\n\r\nimport Quote from './Quote';\r\nimport Author from './Author';\r\n\r\nconst Main = () => {\r\n    const [data, setData] = useState(null);\r\n    const [quote, setQuote] = useState('');\r\n    const [author, setAuthor] = useState('');\r\n    const [genre, setGenre] = useState('');\r\n\r\n    const getRandomQuote = (data) => {\r\n      let randomNumber = Math.floor(Math.random() * data.length);\r\n      for (let i=0; i<data.length; i++) {\r\n        if(data.key === randomNumber) {\r\n          setAuthor(data.key.quoteAuthor);\r\n          setQuote(data.key.quoteText);\r\n          setGenre(data.key.quoteGenre)\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    useEffect (() => {\r\n      async function fetchData() {\r\n        try {\r\n          const response = await fetch('https://quote-garden.onrender.com/api/v3/quotes');\r\n          const data = await response.json();\r\n          console.log(data);\r\n          setData(data);\r\n        } catch (err) {\r\n          console.log(err);\r\n        }\r\n      }\r\n\r\n      fetchData();\r\n      getRandomQuote(data);\r\n    }, []);\r\n\r\n    \r\n\r\n\r\n    return ( \r\n        <div>\r\n          <button id=\"random\" onClick={getRandomQuote}>random</button>\r\n          <Quote quote={quote} />\r\n          <Author author={author} genre={genre} />\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Main;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,oBAAoB;AAE3B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACf,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMgB,cAAc,GAAIR,IAAI,IAAK;IAC/B,IAAIS,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGZ,IAAI,CAACa,MAAM,CAAC;IAC1D,KAAK,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACd,IAAI,CAACa,MAAM,EAAEC,CAAC,EAAE,EAAE;MAChC,IAAGd,IAAI,CAACe,GAAG,KAAKN,YAAY,EAAE;QAC5BJ,SAAS,CAACL,IAAI,CAACe,GAAG,CAACC,WAAW,CAAC;QAC/Bb,QAAQ,CAACH,IAAI,CAACe,GAAG,CAACE,SAAS,CAAC;QAC5BV,QAAQ,CAACP,IAAI,CAACe,GAAG,CAACG,UAAU,CAAC;MAC/B;IACF;EACF,CAAC;EAGDzB,SAAS,CAAE,MAAM;IACf,eAAe0B,SAASA,CAAA,EAAG;MACzB,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iDAAiD,CAAC;QAC/E,MAAMrB,IAAI,GAAG,MAAMoB,QAAQ,CAACE,IAAI,EAAE;QAClCC,OAAO,CAACC,GAAG,CAACxB,IAAI,CAAC;QACjBC,OAAO,CAACD,IAAI,CAAC;MACf,CAAC,CAAC,OAAOyB,GAAG,EAAE;QACZF,OAAO,CAACC,GAAG,CAACC,GAAG,CAAC;MAClB;IACF;IAEAN,SAAS,EAAE;IACXX,cAAc,CAACR,IAAI,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAKN,oBACIH,OAAA;IAAA6B,QAAA,gBACE7B,OAAA;MAAQ8B,EAAE,EAAC,QAAQ;MAACC,OAAO,EAAEpB,cAAe;MAAAkB,QAAA,EAAC;IAAM;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eAC5DnC,OAAA,CAACH,KAAK;MAACQ,KAAK,EAAEA;IAAM;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACvBnC,OAAA,CAACF,MAAM;MAACS,MAAM,EAAEA,MAAO;MAACE,KAAK,EAAEA;IAAM;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACpC;AAEd,CAAC;AAAAjC,EAAA,CA5CKD,IAAI;AAAAmC,EAAA,GAAJnC,IAAI;AA8CV,eAAeA,IAAI;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}