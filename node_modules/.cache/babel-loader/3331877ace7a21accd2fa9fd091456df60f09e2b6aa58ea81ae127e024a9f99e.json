{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\37063\\\\OneDrive\\\\Desktop\\\\projects\\\\quote-generator\\\\src\\\\pages\\\\Main.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport '../styles/main.css';\nimport Quote from '../components/Quote';\nimport Author from '../components/Author';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [data, setData] = useState(null);\n  const [quote, setQuote] = useState('');\n  const [author, setAuthor] = useState('');\n  const [genre, setGenre] = useState('');\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch('https://quote-garden.onrender.com/api/v3/quotes');\n        const responseJson = await response.json();\n        setData(responseJson.data);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (data) {\n      getRandomQuote();\n    }\n  }, []);\n  const getRandomQuote = () => {\n    if (!data) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 16\n      }, this);\n    }\n    let randomNumber = Math.floor(Math.random() * data.length);\n    for (let i = 0; i < data.length; i++) {\n      if (i === randomNumber) {\n        setQuote(data[i].quoteText);\n        setAuthor(data[i].quoteAuthor);\n        setGenre(data[i].quoteGenre);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"random\",\n      onClick: getRandomQuote,\n      children: \"random\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Quote, {\n      quote: quote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_s(Main, \"hvvgdDlTrWI9lHlaBvdmyIm1QMM=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["useState","useEffect","Quote","Author","jsxDEV","_jsxDEV","Main","_s","data","setData","quote","setQuote","author","setAuthor","genre","setGenre","fetchData","response","fetch","responseJson","json","err","console","log","getRandomQuote","children","fileName","_jsxFileName","lineNumber","columnNumber","randomNumber","Math","floor","random","length","i","quoteText","quoteAuthor","quoteGenre","id","onClick","_c","$RefreshReg$"],"sources":["C:/Users/37063/OneDrive/Desktop/projects/quote-generator/src/pages/Main.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nimport '../styles/main.css';\r\n\r\nimport Quote from '../components/Quote';\r\nimport Author from '../components/Author';\r\n\r\nconst Main = () => {\r\n    const [data, setData] = useState(null);\r\n    const [quote, setQuote] = useState('');\r\n    const [author, setAuthor] = useState('');\r\n    const [genre, setGenre] = useState('');\r\n\r\n\r\n    useEffect (() => {\r\n      async function fetchData() {\r\n        try {\r\n          const response = await fetch('https://quote-garden.onrender.com/api/v3/quotes');\r\n          const responseJson = await response.json();\r\n          setData(responseJson.data);\r\n        } catch (err) {\r\n          console.log(err);\r\n        }\r\n      }\r\n      fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      if(data) {\r\n        getRandomQuote();\r\n      }\r\n    }, []);\r\n\r\n    const getRandomQuote = () => {\r\n      if(!data) {\r\n        return <p>Loading...</p>\r\n      }\r\n      let randomNumber = Math.floor(Math.random() * data.length);\r\n      for(let i=0; i<data.length; i++) {\r\n        if(i === randomNumber) {\r\n          setQuote(data[i].quoteText);\r\n          setAuthor(data[i].quoteAuthor);\r\n          setGenre(data[i].quoteGenre);\r\n      }\r\n    }\r\n  }\r\n    return ( \r\n        <div>\r\n          <button id=\"random\" onClick={getRandomQuote}>random</button>\r\n          <Quote quote={quote} />\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Main;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,oBAAoB;AAE3B,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,MAAM,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACf,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAGtCC,SAAS,CAAE,MAAM;IACf,eAAee,SAASA,CAAA,EAAG;MACzB,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iDAAiD,CAAC;QAC/E,MAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;QAC1CX,OAAO,CAACU,YAAY,CAACX,IAAI,CAAC;MAC5B,CAAC,CAAC,OAAOa,GAAG,EAAE;QACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAClB;IACF;IACAL,SAAS,EAAE;EACb,CAAC,EAAE,EAAE,CAAC;EAENf,SAAS,CAAC,MAAM;IACd,IAAGO,IAAI,EAAE;MACPgB,cAAc,EAAE;IAClB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAG,CAAChB,IAAI,EAAE;MACR,oBAAOH,OAAA;QAAAoB,QAAA,EAAG;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI;IAC1B;IACA,IAAIC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGzB,IAAI,CAAC0B,MAAM,CAAC;IAC1D,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC3B,IAAI,CAAC0B,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC/B,IAAGA,CAAC,KAAKL,YAAY,EAAE;QACrBnB,QAAQ,CAACH,IAAI,CAAC2B,CAAC,CAAC,CAACC,SAAS,CAAC;QAC3BvB,SAAS,CAACL,IAAI,CAAC2B,CAAC,CAAC,CAACE,WAAW,CAAC;QAC9BtB,QAAQ,CAACP,IAAI,CAAC2B,CAAC,CAAC,CAACG,UAAU,CAAC;MAChC;IACF;EACF,CAAC;EACC,oBACIjC,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAQkC,EAAE,EAAC,QAAQ;MAACC,OAAO,EAAEhB,cAAe;MAAAC,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eAC5DxB,OAAA,CAACH,KAAK;MAACQ,KAAK,EAAEA;IAAM;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACnB;AAEd,CAAC;AAAAtB,EAAA,CA7CKD,IAAI;AAAAmC,EAAA,GAAJnC,IAAI;AA+CV,eAAeA,IAAI;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}